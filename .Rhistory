available.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
countTable.csv
load("C:/Laura Lab Immersion/countTable.csv")
load("C:/Lab Immersion/valuesres.RData")
resMLE <- results(dds, addMLE=TRUE)
dds2 <- DESeq (dds)
res <- results (dds2)
resMLE <- results(dds, addMLE=TRUE)
dds2 <- DESeq (dds)
resMLE <- results(dds2, addMLE=TRUE)
head(resMLE)
plotMA(resMLE, main="DESeq2", ylim=c(-2,2))
plotMA(resMLE[,-2], main="DESeq2", ylim=c(-2,2))
resMLE2 <- resMLE$log2FoldChange <- NULL
head(resMLE2)
resMLE$log2FoldChange <- NULL
head(resMLE)
plotMA(resMLE, main="DESeq2", ylim=c(-2,2))
plot?
plot?
(q)
plot?
(q)
plot(resMLE$baseMean, resMLE$lfcMLE, xlab= "mean espression", ylab= "log fold change", ylim=c(-2,2))
plot(resMLE$baseMean, resMLE$lfcMLE, xlab= "mean espression", ylab= "log fold change", ylim=c(-2,2), xlim=c(1e-01,1e+05))
plotMA(resMLE(mean=resMLE$baseMean, lfc=resMLE$lfcMLE), main="DESeq2", ylim=c(-2,2))
plotMA(resMLE(mean=resMLE$baseMean, lfc=resMLE$lfcMLE), main="DESeq2", ylim=c(-2,2))
cex=0.45)
plotMA(resMLE, lfcMLE, pvalues, pvalCutoff=.1, ylimc(-2,2), linecol = "#ff000080", pointcol = c("black","red"), xlab="mean expression", ylab="log fold change", log = "x", cex=0.45)
plotMA(resMLE, resMLE$lfcMLE, pvalues, pvalCutoff=.1, ylimc(-2,2), linecol = "#ff000080", pointcol = c("black","red"), xlab="mean expression", ylab="log fold change", log = "x", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, pvalues, pvalCutoff=.1, ylimc(-2,2), xlim=c(1e-01,1e+05), linecol = "#ff000080", pointcol = c("black","red"), xlab="mean expression", ylab="log fold change", log = "x", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, pvalues, pvalCutoff=.1, ylim=c(-2,2), xlim=c(1e-01,1e+05), linecol = "#ff000080", pointcol = c("black","red"), xlab="mean expression", ylab="log fold change", log = "x", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, resMLE$pvalues, pvalCutoff=.1, ylim=c(-2,2), xlim=c(1e-01,1e+05), linecol = "#ff000080", pointcol = c("black","red"), xlab="mean expression", ylab="log fold change", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, resMLE$pvalues, ylim=c(-2,2), xlim=c(1e-08,1e+05), linecol = "#ff000080", if (resMLE$padj > 0.1) {pointcol = "black"} else {pointcol = "red"}, xlab="mean expression", ylab="log fold change", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, resMLE$pvalues, ylim=c(-2,2), xlim=c(1e-08,1e+05), linecol = "#ff000080", if (resMLE$padj > 0.1) {pointcol = "black"} else {pointcol = "red"}, xlab="mean expression", ylab="log fold change", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, resMLE$pvalues, ylim=c(-2,2), xlim=c(1e-08,1e+05), linecol = "#ff000080", if (resMLE$padj > 0.1) {pointcol = "black"} else {pointcol = "red"}, xlab="mean expression", ylab="log fold change",  log = "x", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, resMLE$pvalues, ylim=c(-2,2), xlim=c(1e-02,1e+05), linecol = "#ff000080", if (resMLE$padj > 0.1) {pointcol = "black"} else {pointcol = "red"}, xlab="mean expression", ylab="log fold change",  log = "x", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, resMLE$pvalues, ylim=c(-2,2), xlim=c(1e-01,1e+05), linecol = "#ff000080", if (resMLE$padj > 0.1) {pointcol = "black"} else {pointcol = "red"}, xlab="mean expression", ylab="log fold change",  log = "x", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, resMLE$pvalues, ylim=c(-2,2), xlim=c(1e-01,1e+06), linecol = "#ff000080", if (resMLE$padj > 0.1) {pointcol = "black"} else {pointcol = "red"}, xlab="mean expression", ylab="log fold change",  log = "x", cex=0.45)
warning()
warnings()
plot(resMLE$baseMean, resMLE$lfcMLE, resMLE$pvalues, ylim=c(-2,2), xlim=c(1e-01,1e+06), if (resMLE$padj > 0.1) {pointcol = "black"} else {pointcol = "red"}, xlab="mean expression", ylab="log fold change",  log = "x", cex=0.45)
plot(resMLE$baseMean, resMLE$lfcMLE, resMLE$pvalues, ylim=c(-2,2), xlim=c(1e-01,1e+06), if (cutoff(resMLE$padj, 0.1)) {pointcol = "black"} else {pointcol = "red"}, xlab="mean expression", ylab="log fold change",  log = "x", cex=0.45)
plotMA(resMLE, lfc=resMLE$lfcMLE, main="DESeq2", ylim=c(-2,2))
colnames(resMLE)[2] <- "log2FoldChange"
head(resMLE)
plotMA(resMLE, main="DESeq2", ylim=c(-2,2))
load("C:/Lab Immersion/valuesres.RData")
dds2 <- DESeq (dds)
resMLE <- results(dds2, addMLE=TRUE)
colnames(resMLE)[2] <- "log2FoldChange"
plotMA(resMLE, main="DESeq2", ylim=c(-2,2))
resMLE$log2FoldChange <- NULL
colnames(resMLE)[2] <- "log2FoldChange"
plotMA(resMLE, main="DESeq2", ylim=c(-2,2))
plotMA(resMLE, main="DESeq2 unshrunken", ylim=c(-2,2))
plotMA(res, main="DESeq2", ylim=c(-2,2))
identify(res$baseMean, res$log2FoldChange)
(q)
plotMA(res, main="DESeq2", ylim=c(-2,2))
identify(res$baseMean, res$log2FoldChange)
res[12142]
res[12142,]
save(dds, dds2, ndata, res, reMLE, "valuesres.RData")
save(dds, dds2, ndata, res, reMLE, file= "valuesres.RData")
save(dds, dds2, ndata, res, resMLE, file= "valuesres.RData")
load("valuesres.RData")
load("valuesres.RData")
plotCounts(dds, gene=wich.min(res$padj, intgroup="condition"))
plotCounts(dds, gene=which.min(res$padj, intgroup="condition"))
plotCounts(dds, gene=which.min(res$padj, intgroup="control"))
plotCounts(dds, gene=which.min(res$padj, intgroup="condition"))
?plotCounts
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
plotCounts(dds, gene=ENSG00000167034, intgroup="condition")
plotCounts(dds, gene="ENSG00000167034", intgroup="condition")
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
url <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
url <- d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url)
download.file(url, destfile=R.csv)
download.file(url, destfile=coursera.csv)
download.file(url, destfile="coursera.csv")
data <- read.csv("coursera.csv")
ex1 <- nrows(data$VAL ==24)
nrows <- data[,data$VAL ==24)]
nrows <- data[,data$VAL==24]
nrows <- data[data$VAL==24,]
nrows <- data$VAL==24
nrows <- data([data$VAL==24,])
nrows <- data[data$VAL==24,]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url, destfile="coursera.csv")
```{r}
data <- read.csv('activity.csv', header = TRUE, sep = ",")
```
data <- read.csv('activity.csv', header = TRUE, sep = ",")
setwd("C:/Laura/Cursos/Data science/5- Reproducible research/Week 2 - Tools/Assignment/RepData_PeerAssessment1/RepData_PeerAssessment1-master")
data <- read.csv('activity.csv', header = TRUE, sep = ",")
View(data)
head(data)
data$date <- as.Date(data$date, format = "%Y-%m-%d")
data$interval <- as.factor(data$interval)
View(data)
View(data)
dailysteps <- aggregate(steps ~ date, data, sum)
View(dailysteps)
hist(dailysteps)
library("ggplot")
library("ggplot2")
View(dailysteps)
View(dailysteps)
barplot(steps ~ date)
plot(steps ~ date)
plot(steps ~ date, dailysteps)
plot(steps ~ date, dailysteps, xaxt = "n", type = "l")
axis(1, dm$Date, format(dm$Date, "%b %d"), cex.axis = .7)
axis(1, dailysteps$Date, format(dailysteps$Date, "%b %d"), cex.axis = .7)
axis(1, dailysteps$date, format(dailysteps$date, "%b %d"), cex.axis = .7)
plot(steps ~ date, dailysteps, xaxt = "n", type = "h")
axis(1, dailysteps$date, format(dailysteps$date, "%b %d"), cex.axis = .7)
plot(steps ~ date, dailysteps, xaxt = "n", type = "b,c")
axis(1, dailysteps$date, format(dailysteps$date, "%b %d"), cex.axis = .7)
plot(steps ~ date, dailysteps, xaxt = "n", type = "h", col="blue")
plot(steps ~ date, dailysteps, xaxt = "n", type = "h", col="blue", lwd=2)
plot(steps ~ date, dailysteps, xaxt = "n", type = "h", col="blue", lwd=3)
axis(1, dailysteps$date, format(dailysteps$date, "%b %d"), cex.axis = .7)
main("Mean total number of steps taken per day")
main="Mean total number of steps taken per day"
plot(steps ~ date, dailysteps, xaxt = "n", type = "h", col="blue", lwd=3, main="Mean total number of steps taken per day", xlab= "Date", ylab="Total number of steps by day")
axis(1, dailysteps$date, format(dailysteps$date, "%b %d"), cex.axis = .7)
plot(steps ~ date, dailysteps, xaxt = "n", type = "h", col="blue", lwd=3, main="Mean total number of steps taken per day", xlab= "Date", ylab="Total number of steps taken per day")
axis(1, dailysteps$date, format(dailysteps$date, "%b %d"), cex.axis = .7)
intervalsteps <- aggregate(data$steps, by = list(interval = data$interval), FUN=mean, na.rm=TRUE)
intervalsteps$interval <- as.integer(levels(intervalsteps$interval)[intervalsteps$interval])
head(intervalsteps)
plot(steps ~ interval, intervalsteps, xaxt = "n", type = "h", col="blue", lwd=3, main="Mean total number of steps taken per day", xlab= "Date", ylab="Total number of steps taken per day")
View(intervalsteps)
plot(x ~ interval, intervalsteps, xaxt = "n", type = "h", col="blue", lwd=3, main="Mean total number of steps taken per day", xlab= "Date", ylab="Total number of steps taken per day")
axis(1, intervalsteps$interval), cex.axis = .7)
plot(x ~ interval, intervalsteps, xaxt = "n", type = "l", col="blue", lwd=3, main="Mean total number of steps taken per day", xlab= "Date", ylab="Total number of steps taken per day")
plot(x ~ interval, intervalsteps, xaxt = "n", type = "l", col="blue", lwd=2.5, main="Time series plot of average number of steps taken by interval", xlab= "Interval", ylab="Average number of steps taken")
plot(x ~ interval, intervalsteps, xaxt = "n", type = "l", col="blue", lwd=2.5, main="Time series plot of the average number of steps taken by interval", xlab= "Interval", ylab="Average number of steps taken")
maximuminterval <- intervalsteps[which.max(intervalsteps$steps),]
View(maximuminterval)
intervalsteps <- aggregate(data$steps, by = list(interval = data$interval), FUN=mean, na.rm=TRUE)
maximuminterval <- intervalsteps[which.max(intervalsteps$steps),]
View(maximuminterval)
View(intervalsteps)
maximuminterval <- intervalsteps[which.max(intervalsteps$x),]
View(maximuminterval)
missingvalues <- sum(is.na(data$steps))
fill <- function(data, intervalsteps) {na <- which(is.na(data$steps))
replace <- unlist(lapply(na, FUN=function(idx){
interval = data[idx,]$interval
intervalsteps[intervalsteps$interval == interval,]$steps
}))
fillsteps <- data$steps
fillsteps[na] <- replace
fillsteps
}
filldata <- data.frame(steps = fill(data, intervalsteps), date = data$date, interval = data$interval)
fill <- function(data, intervalsteps) {naI <- which(is.na(data$steps))
replace <- unlist(lapply(naI, FUN=function(idx){
interval = data[idx,]$interval
intervalsteps[intervalsteps$interval == interval,]$steps
}))
fillsteps <- data$steps
fillsteps[naI] <- replace
fillsteps
}
filldata <- data.frame(steps = fill(data, intervalsteps), date = data$date, interval = data$interval)
str(rdata_fill)
We check that are there any missing values remaining or not
sum(is.na(rdata_fill$steps))
Zero output shows that there are NO MISSING VALUES.
fill <- function(data, pervalue) {naI <- which(is.na(data$steps))
replace <- unlist(lapply(naI, FUN=function(idx){
interval = data[idx,]$interval
pervalue[pervalue$interval == interval,]$steps
}))
fillsteps <- data$steps
fillsteps[naI] <- replace
fillsteps
}
filldata <- data.frame(steps = fill(data, pervalue), date = data$date, interval = data$interval)
fill <- function(data, intervalsteps) {naI <- which(is.na(data$steps))
replace <- unlist(lapply(naI, FUN=function(idx){
interval = data[idx,]$interval
intervalsteps[intervalsteps$interval == interval,]$x
}))
fillsteps <- data$steps
fillsteps[naI] <- replace
fillsteps
}
filldata <- data.frame(steps = fill(data, intervalsteps), date = data$date, interval = data$interval)
sum(is.na(filldata$steps))
filleddata <- data.frame(steps = fill(data, intervalsteps), date = data$date, interval = data$interval)
head(filleddata)
sum(is.na(fillesdata$steps))
sum(is.na(filleddata$steps))
dailystepsfilled <- aggregate(steps ~ date, filleddata, sum)
plot(steps ~ date, dailystepsfilled, xaxt = "n", type = "h", col="blue", lwd=3, main="Mean total number of steps taken per day", xlab= "Date", ylab="Total number of steps taken per day")
axis(1, dailysteps$date, format(dailysteps$date, "%b %d"), cex.axis = .7)
meansteps   <- mean(dailystepsfilled$steps, na.rm=TRUE)
mediansteps <- median(dailystepsfilled$steps, na.rm=TRUE)
?weekdays
weekx <- weekdays(filleddata$date, abbreviate=FALSE)
weekx <- weekdays(filleddata$date, abbreviate=TRUE)
filleddata$weekx <- weekx
View(filleddata)
filleddata <- data.frame(steps = fill(data, intervalsteps), date = data$date, interval = data$interval)
weekx <- weekdays(filleddata$date, abbreviate=TRUE)
weekxlevel <- vector()
for (i in 1:nrow(filleddata)) {
if (day[i] == "sab") {
daylevel[i] <- "Weekend"
} else if (day[i] == "dom") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
activity$daylevel <- daylevel
weekx <- weekdays(filleddata$date, abbreviate=TRUE)
weekxlevel <- vector()
for (i in 1:nrow(filleddata)) {
if (weekx[i] == "sab") {
weekxlevel[i] <- "Weekend"
} else if (weekx[i] == "dom") {
weekxlevel[i] <- "Weekend"
} else {
weekxlevel[i] <- "Weekday"
}
}
weekx <- weekdays(filleddata$date, abbreviate=TRUE)
weekxlevel <- vector()
for (i in 1:nrow(filleddata)) {
if (weekx[i] == "sab") {
weekxlevel[i] <- "Weekend"
} else if (weekx[i] == "dom") {
weekxlevel[i] <- "Weekend"
} else {
weekxlevel[i] <- "Weekday"
}
}
weekxdata <- data.frame(steps = filleddata$steps, date = filleddata$date, interval = filleddata$interval)
weekxdata$weekxlevel <- weekxlevel
weekxdata$weekxlevel <- factor(weekxdata$weekxlevel)
View(weekxdata)
weekxinterval <- aggregate(steps ~ interval + weekxlevel, data = weekxdata, mean)
names(weekxinterval) <- c("interval", "daylevel", "steps")
View(weekxinterval)
xyplot(steps ~ interval | weekxlevel, weekxinterval, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps", main= "Time series plot of the average number of steps taken by interval)
xyplot(steps ~ interval | weekxlevel, weekxinterval, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps", main= "Time series plot of the average number of steps taken by interval")
xyplot(steps ~ interval | weekxlevel, weekxinterval, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps", main= "Time series plot of the average number of steps taken by interval")
library("lattice")
xyplot(steps ~ interval | weekxlevel, weekxinterval, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps", main= "Time series plot of the average number of steps taken by interval")
View(maximuminterval)
View(weekxinterval)
View(weekxinterval)
names(weekxinterval) <- c("interval", "weekxlevel", "steps")
xyplot(steps ~ interval | weekxlevel, weekxinterval, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps", main= "Time series plot of the average number of steps taken by interval")
?knitr
html_document: keep_md: TRUE
